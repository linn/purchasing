Description: Template
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  dockerTag:
    Type: String
    Description: Docker tag to deploy
  appRoot:
    Type: String
    Description: app root
  proxyRoot:
    Type: String
    Description: proxy root
  authorityUri:
    Type: String
    Description: OIDC authority uri
  databaseHost:
    Type: String
    Description: Database host
  databaseName:
    Type: String
    Description: Database name
  databaseUserId:
    Type: String
    Description: Database user id
  databasePassword:
    Type: String
    Description: Database password
  rabbitServer:
    Type: String
    Description: Rabbit server
  rabbitPort:
    Type: Number
    Description: Rabbit port
  rabbitUsername:
    Type: String
    Description: Rabbit username
  rabbitPassword:
    Type: String
    Description: Rabbit password
  loggingEnvironment:
    Type: String
    Description: Logging Environment
  loggingMaxInnerExceptionDepth:
    Type: Number
    Description: Logging Max Inner Exception Depth
  smtpHostname:
    Type: String
    Description: SMTP Hostname
  pdfServiceRoot:
    Type: String
    Description: Pdf Service API root url  
  environmentSuffix:
    Type: String
    AllowedValues:
      - ''
      - -sys
    Description: Environment suffix e.g -sys
  TestClusterName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of test cluster
    Default: TestClusterName
  ProductionClusterName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of production cluster
    Default: ProductionClusterName

Conditions:
  isTesting: !Equals [!Ref environmentSuffix, "-sys"]

Resources:
  templateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [ "ecs-tasks.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
      - PolicyName: templateServices
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
              Fn::ImportValue: logging-queue-arn
          - Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendRawEmail
            Resource: '*'
      - PolicyName: kms
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
            Resource: "*"
      - PolicyName: s3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::auth${environmentSuffix}*-keysbucket*"
  templateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt templateRole.Arn
      ContainerDefinitions:
      - Name: template
        Cpu: '1'
        Essential: 'true'
        Image: !Sub docker.io/linn/template:${dockerTag}
        PortMappings:
        - ContainerPort: 5050
        Memory: '150'
        LogConfiguration:
          LogDriver: gelf
          Options:
            'gelf-address': 'udp://syslog.linn.co.uk:12201'
            'tag': !Sub template-${dockerTag}-ecs-task
        Environment:
        - Name: DATABASE_HOST
          Value: !Ref databaseHost
        - Name: DATABASE_NAME
          Value: !Ref databaseName
        - Name: DATABASE_USER_ID
          Value: !Ref databaseUserId
        - Name: DATABASE_PASSWORD
          Value: !Ref databasePassword
        - Name: RABBIT_SERVER
          Value: !Ref rabbitServer
        - Name: RABBIT_PORT
          Value: !Ref rabbitPort
        - Name: RABBIT_USERNAME
          Value: !Ref rabbitUsername
        - Name: RABBIT_PASSWORD
          Value: !Ref rabbitPassword
        - Name: APP_ROOT
          Value: !Ref appRoot
        - Name: PROXY_ROOT
          Value: !Ref proxyRoot
        - Name: AUTHORITY_URI
          Value: !Ref authorityUri
        - Name: LOG_AMAZON_SQSQUEUEURI
          Value: !ImportValue logging-queue-url
        - Name: LOG_ENVIRONMENT
          Value: !Ref loggingEnvironment
        - Name: LOG_MAX_INNER_EXCEPTION_DEPTH
          Value: !Ref loggingMaxInnerExceptionDepth
        - Name: SMTP_HOSTNAME
          Value: !Ref smtpHostname
        - Name: PDF_SERVICE_ROOT
          Value: !Ref pdfServiceRoot
        - Name: awsRegion
          Value: !Ref AWS::Region
        - Name: KEYS_BUCKET_NAME
          Value:
            Fn::ImportValue:
              !Sub "linn-keys-bucket${environmentSuffix}"
        - Name: KMS_KEY_ALIAS
          Value:
            Fn::ImportValue:
              !Sub "kms-key-alias${environmentSuffix}"
  templateService:
    Type: AWS::ECS::Service
    Properties:
      # Have to use long form conditional
      Cluster: !If
        - isTesting
        - !Sub ${TestClusterName}
        - !Sub ${ProductionClusterName}
      DesiredCount: !If [ isTesting, 1, 2]
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
      TaskDefinition: !Ref templateTaskDefinition
      Role: ecsServiceRole
      LoadBalancers:
      - ContainerName: template
        ContainerPort: 5050
        TargetGroupArn:
          Fn::ImportValue:
            !Sub "template-target-group-arn${environmentSuffix}"
